<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Webpack</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>资源加载/打包工具（项目构建工具）</p><p>npm 存储各种包管理器的云端仓库</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//全局安装</span><br><span class="line">npm i webpack -g</span><br><span class="line"></span><br><span class="line">//项目依赖安装</span><br><span class="line">npm install --save-dev webpack-cli -g</span><br><span class="line"></span><br><span class="line">//最终安装-D开发模式-S生产模式</span><br><span class="line">npm i webpack webpack-cil -D</span><br><span class="line"></span><br><span class="line">//卸载</span><br><span class="line">npm uninstall -g webpack-cli</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>创建项目文件夹    内需含src和pubilc文件</p><p>dist 放置打包后的文件   </p><p>pubilc 放置静态资源</p><p>src 放置源码</p><p>打开项目根目录的命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">空目录npm init -y</span><br><span class="line"></span><br><span class="line">建src文件夹放css,js</span><br><span class="line">建public文件夹放html</span><br><span class="line">导入jqnpm i jquery</span><br><span class="line"></span><br><span class="line">在js文件夹写代码</span><br><span class="line">import 接收者  from &#x27;导入包&#x27;</span><br><span class="line"></span><br><span class="line">打包  webpack</span><br><span class="line">webpack ./src/index.js -o ./dist/</span><br><span class="line"></span><br><span class="line">html中导入js,运行</span><br><span class="line"></span><br><span class="line">package.json文件中script添加</span><br><span class="line">&quot;dev&quot;: &quot;webpack&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack ./src/index.js -o ./dist/&quot;</span><br><span class="line"></span><br><span class="line">运行npm run test     npm run dev</span><br><span class="line"></span><br><span class="line">新建webpack.config.js文件</span><br><span class="line">//导入模块</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">//Node.js导出语法，导出webpack配置对象  module.exports = &#123; &#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  //配置打包模式</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  //配置入口文件   __dirname当前模块目录名</span><br><span class="line">  entry: path.join(__dirname, &#x27;./src/index.js&#x27;),</span><br><span class="line">  // 配置输出文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    // 配置输出的文件名</span><br><span class="line">    filename: &#x27;bundle.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">安装插件 npm i clean-webpack-plugin -D</span><br><span class="line">//webpack.config.js文件</span><br><span class="line">let &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">plugins:[</span><br><span class="line">new CleanWebpackPlugin()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装插件  npm i webpack-dev-server -D</span><br><span class="line">//webpack.config.js文件</span><br><span class="line">devServer: &#123;</span><br><span class="line">static: &#123;</span><br><span class="line">//html放置位置</span><br><span class="line">directory: path.join(__dirname, &#x27;public&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">    port: 80,</span><br><span class="line">    //项目部署的ip地址 默认本机</span><br><span class="line">    host: &#x27;localhost&#x27;,</span><br><span class="line">    //编译成功后，自动打开浏览器</span><br><span class="line">    open: true,</span><br><span class="line">    hot: true,</span><br><span class="line">    //设置端口号</span><br><span class="line">    port: 9000,</span><br><span class="line">    //启用gzip压缩</span><br><span class="line">    compress: true</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //package.json文件script中</span><br><span class="line">  &quot;serve&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">  </span><br><span class="line">  运行npm run serve</span><br><span class="line">  y</span><br><span class="line">  改js路径</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  安装插件npm i html-webpack-plugin -D</span><br><span class="line">  //webpack.config.js文件</span><br><span class="line">  let HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">  plugins:[</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: path.join(__dirname, &quot;public/index.html&quot;),</span><br><span class="line">dilename: &#x27;index.html&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">   运行npm run serve</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a>打包css文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">新建css文件，写样式</span><br><span class="line"></span><br><span class="line">在index.js中，引入css模块</span><br><span class="line"> import &#x27;./index.css&#x27;;</span><br><span class="line">  $(function()&#123;</span><br><span class="line">    $(&#x27;div&#x27;).css(&#123;</span><br><span class="line">        height:&#x27;200px&#x27;,</span><br><span class="line">        width:&#x27;200px&#x27;,</span><br><span class="line">        background:&#x27;skyblue&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  安装loader加载器插件</span><br><span class="line">  npm i style-loader css-loader --save-dev</span><br><span class="line">  运行npm run serve</span><br><span class="line">  </span><br><span class="line">  //webpack.config.js文件</span><br><span class="line">  module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">  &#123;</span><br><span class="line">  //匹配文件处理模块  从后向前调用</span><br><span class="line">  test: /\.css$/, </span><br><span class="line">  use: [</span><br><span class="line">  &#x27;style-loader&#x27;,</span><br><span class="line">            &#x27;css-loader&#x27;</span><br><span class="line">            ]</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="打包less文件"><a href="#打包less文件" class="headerlink" title="打包less文件"></a>打包less文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">新建less文件</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: rgb(27, 98, 107);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在index.js中，引入less模块</span><br><span class="line">import &#x27;./demo.less&#x27;;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&#x27;div&#x27;).css(&#123;</span><br><span class="line">        height:&#x27;200px&#x27;,</span><br><span class="line">        width:&#x27;200px&#x27;,</span><br><span class="line">        background:&#x27;skyblue&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">安装 npm i less-loader less --save-dev</span><br><span class="line"></span><br><span class="line">//webpack.config.js文件</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123; </span><br><span class="line">test: /\.less$/,</span><br><span class="line">    use: [</span><br><span class="line">    &#x27;style-loader&#x27;, </span><br><span class="line">    &#x27;css-loader&#x27;, </span><br><span class="line">    &#x27;less-loader&#x27;</span><br><span class="line">     ] </span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 运行npm run dev</span><br></pre></td></tr></table></figure><h2 id="打包-sass-文件"><a href="#打包-sass-文件" class="headerlink" title="打包 sass 文件"></a>打包 sass 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">安装 npm i sass-loader node-sass --save-dev</span><br><span class="line"></span><br><span class="line">//webpack.config.js文件</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.scss$/,</span><br><span class="line">        use: [</span><br><span class="line">        &#x27;style-loader&#x27;,</span><br><span class="line">        &#x27;css-loader&#x27;, </span><br><span class="line">        &#x27;sass-loader&#x27;</span><br><span class="line">        ]</span><br><span class="line">        &#125; </span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/posts/71adb096.html"/>
      <url>/posts/71adb096.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>被设计执行特定任务的代码块，将有相同或相似逻辑的代码封装后，通过调用执行。</p><p>提高代码复用率，利于精简代码。</p><h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><p>function 函数名 () {</p><p>​    函数体</p><p>}</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数必须调用后，函数体内的代码逻辑才会执行</p><p>一次声明可多次调用</p><p>函数名()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function hello() &#123;</span><br><span class="line">document.write(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">hello();//hi</span><br></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>形参：函数内声明的变量</p><p>实参：给声明的变量赋值</p><p>提高函数灵活性</p><h3 id="声明函数-1"><a href="#声明函数-1" class="headerlink" title="声明函数"></a>声明函数</h3><p>function 函数名(参数列表) {</p><p>​    函数体</p><p>}</p><h3 id="函数调用-1"><a href="#函数调用-1" class="headerlink" title="函数调用"></a>函数调用</h3><p>调用函数时，传递多个数据，需用逗号隔开。</p><p>函数名(传递的参数列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function num(i) &#123;</span><br><span class="line">console.log(i * i);</span><br><span class="line">&#125;</span><br><span class="line">num(5);//25</span><br><span class="line"></span><br><span class="line">function num(i, j) &#123;</span><br><span class="line">console.log(i * j);</span><br><span class="line">&#125;</span><br><span class="line">num(5, 6);//30</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>给形参一个为0的默认值，当缺少实参参数传递时，执行默认值。</p><p>函数优先执行用户传递的实参，当形参变量无值时默认undefined。</p><p>当实参和形参均为undefined时，结果为NaN。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function num(x, y) &#123;</span><br><span class="line">console.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">num();//NaN</span><br><span class="line"></span><br><span class="line">function num(x = 0, y = 0) &#123;</span><br><span class="line">console.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">num();//0</span><br><span class="line">num(4, 5);//9</span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>当调用函数执行任务结束后，函数返回一个结果，对执行结果扩展性更高。</p><p>return后的代码不再执行，能将函数内部执行结果交给函数外部。</p><p>有返回值的函数没有return时，函数默认返回undefined。</p><p>return 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function num(x, y) &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line">let sum = num(4, 7);</span><br><span class="line">console.log(sum);//11</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>限定变量名的可用性代码范围，提高了程序逻辑局限性，可靠性，减少变量名冲突。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用于所有代码执行环境</p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>作用于函数内代码环境</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>在函数内部声明的变量，访问范围只在函数内部。</p><p>不同函数内部声明变量无法相互访问，函数执行完毕后，函数内部变量清空。</p><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>使用花括号包裹的代码块内部声明的变量，有可能无法被外部访问。</p><p>var没有块作用域，let、const有块作用域。</p><p>不同代码块之间变量无法相互访问。</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在任何区域都可访问和修改，函数外部let的变量</p><p>为window对象动态添加的属性默认全局，函数未使用关键字声明的变量为全局变量</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>只在当前函数内部访问和修改，函数内部let的变量。</p><p>函数内部的形参可看作局部变量。</p><p>当在函数内部中局部或块级变量未声明直接赋值时，当全局变量看。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>由嵌套关系作用域串联形成的，本质是底层变量查找机制，采用就近原则的方式查找变量最终的值。</p><p>变量访问原则：先局部后全局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function f1() &#123;</span><br><span class="line">     let num = 123;</span><br><span class="line">     function f2() &#123;</span><br><span class="line">       console.log(num);</span><br><span class="line">     &#125;</span><br><span class="line">     f2();</span><br><span class="line">   &#125;</span><br><span class="line">   let num = 456;</span><br><span class="line">   f1();  //123</span><br><span class="line"></span><br><span class="line">function f1() &#123;</span><br><span class="line">     let num = 123;</span><br><span class="line">     function f2() &#123;</span><br><span class="line">       let num = 0;</span><br><span class="line">       console.log(num);</span><br><span class="line">     &#125;</span><br><span class="line">     f2();</span><br><span class="line">   &#125;</span><br><span class="line">   let num = 456;</span><br><span class="line">   f1(); //0</span><br><span class="line"></span><br><span class="line">let a = 1;</span><br><span class="line">   function fn1() &#123;</span><br><span class="line">     let a = 2;</span><br><span class="line">     let b = &#x27;22&#x27;;</span><br><span class="line">     fn2();</span><br><span class="line">     function fn2() &#123;</span><br><span class="line">       let a = 3;</span><br><span class="line">       fn3();</span><br><span class="line">       function fn3() &#123;</span><br><span class="line">         let a = 4;</span><br><span class="line">         console.log(a);   //4</span><br><span class="line">         console.log(b);  //22</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   fn1();</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h3><p>声明: function fn() {}</p><p>调用：fn()</p><h3 id="匿名函数-1"><a href="#匿名函数-1" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>没有名字的函数，无法直接使用</p><p>function () {}</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><h5 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h5><p>将匿名函数赋值给一个变量，通过变量名称调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let fn = function () &#123;</span><br><span class="line"></span><br><span class="line">//函数体</span><br><span class="line"></span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h5 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h5><p>无需调用立即执行，避免全局变量之间的污染，多个立即执行函数用分号隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//方式1</span><br><span class="line">(function () &#123;</span><br><span class="line">console.log(11);</span><br><span class="line">&#125;) ()</span><br><span class="line"></span><br><span class="line">//方式2</span><br><span class="line">(function () &#123;</span><br><span class="line">console.log(11);</span><br><span class="line">&#125; ())</span><br><span class="line"></span><br><span class="line">(function flexible(windoww, document) &#123;</span><br><span class="line">//window.devicePixelRatio  获取当前设备dpr</span><br><span class="line">//获取不到默认取1,移动端获取2执行2</span><br><span class="line">    let dpr = window.devicePixelRatio || 1;</span><br><span class="line">&#125;(window, document))</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>初始化对象，以大写字母开头命名函数，把对象中的相同属性和方法抽出封装到函数里，快速创建多个类似的对象。</p><p>使用 new 实例化构造函数时，没有参数时可以省略 ()。 </p><p>构造函数内部的 return 返回的值无效，返回值为新创建的对象 </p><p>通过构造函数创建的对象为实例对象，实例对象中的属性和方法为实例成员。</p><p>实例对象间互不影响，实例成员为构造函数传入参数，动态创建结构相同但值不同的对象。</p><p> 构造函数名字首字母要大写，不需要return 就可直接返回结果，调用构造函数必须实例化创建一个对象，属性和方法前面必须添加 this。</p><p>function 构造函数名() {</p><p>​    this.属性 = 值;</p><p>​    this.方法 = function() {}</p><p>}</p><p>new 构造函数名();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.hobby = function(hobby) &#123;</span><br><span class="line">console.log(hobby);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let star = new Person(&#x27;小花&#x27;, 10);</span><br><span class="line">console.log(star.name);//小花</span><br><span class="line">console.log(star[&#x27;name&#x27;]);//小花</span><br><span class="line">star.hobby(&#x27;哈哈&#x27;);//哈哈</span><br></pre></td></tr></table></figure><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>相同作用域中，函数声明前调用，使函数的声明调用更灵活。</p><p>函数表达式不存在提升的现象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line">function fn() &#123;</span><br><span class="line">console.log(&#x27;函数提升&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>提升函数应用的灵活度</p><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>arguments(动态参数),是函数内部内置的包含调用函数时传入的所有实参的伪数组变量。</p><p>当不确定传递多少个实参时，用arguments通过for循环动态获取函数传递的实参。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//求生函数，计算所有参数的和</span><br><span class="line">function sum() &#123;</span><br><span class="line">let s = 0;</span><br><span class="line">for (let i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line"> s += arguments[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(s);</span><br><span class="line">&#125;</span><br><span class="line">sum(2, 4);//6</span><br><span class="line">sum(1, 2, 3);//6</span><br><span class="line">sum(3, 4, 5, 6, 7);//25</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>借…将不定数量的参数表示为一个数组，获取多余实参数组成真数组，写在函数最末形参前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getSum(...other) &#123;</span><br><span class="line">console.log(other);</span><br><span class="line">&#125;</span><br><span class="line">getSum(1, 2, 3);//6</span><br></pre></td></tr></table></figure><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>(…)不修改原数组的情况下，将一个数组展开</p><p>常用在求数组最大最小值、合并数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(...arr);//12345</span><br><span class="line"></span><br><span class="line">//求数组最大最小值</span><br><span class="line">const arr = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(...arr);//123456</span><br><span class="line">console.log(Math.max(...arr));//6</span><br><span class="line">console.log(Math.min(...arr));//1</span><br><span class="line"></span><br><span class="line">//合并数组</span><br><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">const arr2 = [4, 5, 6];</span><br><span class="line">const arr3 = [...arr1, ...arr2];</span><br><span class="line">console.log(arr3);//[1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h2 id="逻辑中断"><a href="#逻辑中断" class="headerlink" title="逻辑中断"></a>逻辑中断</h2><p>满足一定条件后，右边代码不执行</p><p>运算结果为最后被执行的表达式值，常用在变量赋值中</p><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>左边为false就短路</p><p>表达式1 为真返回表达式2 ，表达式1为假返回表达式1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(false &amp;&amp; 20) //flase</span><br><span class="line">console.log(5 &lt; 3 &amp;&amp; 20) //flase</span><br><span class="line">console.log(undefined &amp;&amp; 20)//undefined</span><br><span class="line">console.log(null &amp;&amp; 20) //null</span><br><span class="line">console.log(0 &amp;&amp; 20) //0</span><br><span class="line">console.log(10 &amp;&amp; 20)//20</span><br><span class="line">console.log(0 &amp;&amp; 1 + 2 &amp;&amp; 456 * 56789); // 0</span><br><span class="line">console.log(&#x27;&#x27; &amp;&amp; 1 + 2 &amp;&amp; 456 * 56789); // &#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="||"></a>||</h3><p>左边为true就短路</p><p>表达式1为真返回表达式1，表达式1为假返回表达式2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  function num(x, y) &#123;</span><br><span class="line">      x = x || 0;</span><br><span class="line">      y = y || 0;</span><br><span class="line">      console.log(x + y);</span><br><span class="line">    &#125;</span><br><span class="line">   num(1, 2);  //3</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">console.log(false || 20) //20</span><br><span class="line">console.log(5 &lt; 3 || 20) //20</span><br><span class="line">console.log(undefined || 20)//20</span><br><span class="line">console.log(null || 20) //20</span><br><span class="line">console.log(0 || 20) //20</span><br><span class="line">console.log(10 || 20)//10</span><br><span class="line">console.log(123 || 456 || 456 + 123); // 123</span><br><span class="line">console.log(0 || 456 || 456 + 123); // 456</span><br></pre></td></tr></table></figure><h3 id="转换为Boolean型"><a href="#转换为Boolean型" class="headerlink" title="转换为Boolean型"></a>转换为Boolean型</h3><p>除’ ‘、0、undefined、null、false、NaN外，其余转换为布尔值后均为true</p><p>undefined经过数字转换后变为NaN</p><p>null经过数字转换后变为0</p><p>-使空字符串转换为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;&#x27; - 1)//-1 </span><br><span class="line">console.log(&#x27;haha&#x27; - 1)//NaN </span><br><span class="line">console.log(null + 1)//1</span><br><span class="line">console.log(undefined + 1)//NaN </span><br><span class="line">console.log(NaN + 1)//NaN </span><br><span class="line">console.log(null == undefined)//true</span><br><span class="line">console.log(null === undefined)//false</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>使函数书写更简洁，不需绑定this</p><p>适用于需要匿名函数的地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function () &#123;</span><br><span class="line">console.log(&#x27;普通函数&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = () =&gt; &#123;</span><br><span class="line">console.log(&#x27;箭头函数&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>函数只有一个参数时，可以省略小括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function (x) &#123;</span><br><span class="line">return x + x</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1));//2</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = x =&gt; &#123;</span><br><span class="line">return x + x</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1));//2</span><br></pre></td></tr></table></figure><p>函数体只有一行代码时，可以写在同一行，无需return可直接返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function (x, y) &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1, 2));//3</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = (x, y) =&gt; x + y;</span><br><span class="line">console.log(fn(1, 2));//3</span><br></pre></td></tr></table></figure><p>返回对象时，用小括号包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn1 = function (uname) &#123;</span><br><span class="line">return &#123;uname : uname&#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(fn1(&#x27;哈哈&#x27;));//&#123;uname: &#x27;哈哈&#x27;&#125;</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn1 = uname =&gt; (&#123;uname : uname&#125;);</span><br><span class="line">console.log(fn1(&#x27;哈哈&#x27;));//&#123;uname: &#x27;哈哈&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h3><p>箭头函数有剩余参数，没有 arguments 动态参数</p><h3 id="箭头函数this"><a href="#箭头函数this" class="headerlink" title="箭头函数this"></a>箭头函数this</h3><p>箭头函数不会创建自己的this，需根据函数调用，从自身作用域链的上一层沿用this值</p><p>事件回调函数使用箭头函数时，this为全局window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//普通函数指向调用者 </span><br><span class="line">console.log(this);</span><br><span class="line">const sayHi = function () &#123;</span><br><span class="line">console.log(this);   //指向window</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">console.log(this);//指向btn</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//箭头函数沿用上一层this值 </span><br><span class="line">console.log(this);</span><br><span class="line">    const sayHi = () =&gt; &#123;</span><br><span class="line">      console.log(this);    //window</span><br><span class="line">    &#125;</span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      console.log(this);//window</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">//DOM事件回调</span><br><span class="line">const btn = document.querySelector(&#x27;.btn&#x27;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">console.log(this);//箭头 指window</span><br><span class="line">&#125;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">console.log(this);//普通 指DOM对象</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p>封装乘法表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function num() &#123;</span><br><span class="line">for (let i = 1; i &lt;= 9; i++) &#123;</span><br><span class="line">// console.log(i);</span><br><span class="line">for (let j = 1; j &lt;= i; j++) &#123;</span><br><span class="line">// console.log(j);</span><br><span class="line">document.write(`&lt;span&gt; $&#123;j&#125; X $&#123;i&#125; = $&#123;j * i&#125; &lt;/span&gt;`);</span><br><span class="line">&#125;</span><br><span class="line">document.write(&#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num();</span><br></pre></td></tr></table></figure><p>转换时间</p><p>小时： h = parseInt(总秒数 / 60 / 60 % 24)</p><p>分钟： m = parseInt(总秒数 / 60 % 60 ) </p><p>秒数: s = parseInt(总秒数 % 60) </p><p>写一个求和函数 不管用户传入几个实参，都要把和求出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/posts/f3fb008f.html"/>
      <url>/posts/f3fb008f.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Node.JS</p><p>VScode软件</p><p>GitHub账号</p><p>Hexo</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Licorice`Blog","short_name":"Licorice","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts>.recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside>div>button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
  
</search>
