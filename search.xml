<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css常用样式</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>CSS层叠样式表全称为Cascading Style Sheets,用来表现HTML或XML文件样式的计算机语言。<br>Css具有层叠性和继承性,不同选择器设置的样式可以共同对标签起作用,子元素会自动继承父元素的字体文本样式,除布局样式一般不能被继承。</p><p>使用方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 语法： 选择器 &#123; 属性1:属性值1; 属性2:属性值2; &#125; --&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  p&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联样式 --&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt; 样式 &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 外联样式 --&gt;</span><br><span class="line">&lt;!-- 链接式 先加载后编译显示 --&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=&quot; stylesheet &quot; href=&quot; css文件位置 &quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 导入式 先显示后加载--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  @import url(&quot; css文件位置 &quot;)</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!-- 行内样式 --&gt;</span><br><span class="line">&lt;p style=&quot; color:red; &quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>选择器优先级：<br>!important &gt; 内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p><p>选择器权重：<br>内联样式权重为1000；id选择器权重为100；类、属性、伪类选择器权重为10；元素/标签选择器权重为1；通配符权重为0 </p><p>选择器:将样式表和标签内容建立链接,选择对应标签调整样式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全局选择器 通配符*,匹配页面所有字符--&gt;</span><br><span class="line">*&#123;&#125;</span><br><span class="line">&lt;!-- 标签选择器 一般用于整体样式,选中页面所有同类标签 --&gt;</span><br><span class="line">标签名&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 类选择器 同名类选择器可重复使用--&gt;</span><br><span class="line">标签定义属性: class=&quot; 类名 &quot;</span><br><span class="line">.类名&#123;</span><br><span class="line">  属性: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- id选择器 唯一性,不可重复使用 --&gt;</span><br><span class="line">标签定义属性: id=&quot; id名 &quot;</span><br><span class="line">#id名&#123;</span><br><span class="line">  属性: 属性值;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 锚伪类选择器 --&gt;</span><br><span class="line">a:link  超链接未访问样式</span><br><span class="line">a:visited   访问后样式</span><br><span class="line">a:hover  鼠标悬浮样式</span><br><span class="line">a:active  单击不释放样式</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>常用样式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字体颜色 </span><br><span class="line">  英文单词</span><br><span class="line">  十六进制</span><br><span class="line">  RGB：rgb(0-255，0-255，0-255)</span><br><span class="line">  RGBA：rgba(0-255，0-255，0-255, 透明度：0透明/-1纯色)</span><br><span class="line">--&gt;</span><br><span class="line">color</span><br><span class="line">&lt;!-- 字体样式 </span><br><span class="line">     normal(正常字体)、italic(斜体)、oblique(倾斜)、inherit(继承父级) --&gt;</span><br><span class="line">font-style</span><br><span class="line">&lt;!-- 小写转大写 字体较小  </span><br><span class="line">     normal(默认值，标准字体)、small-caps(小型大写字母)、inherit(继承父元素) --&gt;</span><br><span class="line">font-variant</span><br><span class="line">&lt;!-- 字体加粗 范围100-900   </span><br><span class="line">     normal(默认 400)、bold(粗体 700)、bolder(加粗)、lighter(细体)、inherit(继承父级) --&gt;</span><br><span class="line">font-weight</span><br><span class="line">&lt;!-- 字体大小 </span><br><span class="line">    px(固定)、em、rem(响应式) --&gt;</span><br><span class="line">font-size</span><br><span class="line">&lt;!-- 字体类型 --&gt;</span><br><span class="line">font-family</span><br><span class="line">&lt;!-- 字体对齐方式 </span><br><span class="line">     left(左对齐)、right(右对齐)、center(居中)、justify(两端对齐)、inherit(继承父元素) --&gt;</span><br><span class="line">text-align</span><br><span class="line">&lt;!-- 首行缩进 --&gt;</span><br><span class="line">text-indent</span><br><span class="line">&lt;!-- 行高   行高等于高时，文本垂直居中 --&gt;</span><br><span class="line">line-height</span><br><span class="line">&lt;!-- 大小写字母转换 </span><br><span class="line">     none(默认)、capitalize(以大写字母开头)、uppercase(全大写)、lowercase(全小写) --&gt;</span><br><span class="line">text-transform</span><br><span class="line">&lt;!-- 文本修饰线 </span><br><span class="line">     none(默认)、underline(下划线)、overline(上划线)、line-through(中线) --&gt;</span><br><span class="line">text-decoration</span><br><span class="line">&lt;!-- 背景色 --&gt;</span><br><span class="line">background-color</span><br><span class="line">&lt;!-- 背景图 --&gt;</span><br><span class="line">background-image</span><br><span class="line">&lt;!-- 背景平铺 --&gt;</span><br><span class="line">background-position</span><br><span class="line">&lt;!-- 背景位置 --&gt;</span><br><span class="line">background-position</span><br><span class="line">&lt;!-- 背景滚动 --&gt;</span><br><span class="line">background-attachment</span><br><span class="line">&lt;!-- 列表标记样式 </span><br><span class="line">     disc(实心圆)、circle(空心圆)、square(实心方块)、decimal(数字)、decimal-leading-zero(数字，零开头01)、lower-roman(小罗马数字)、upper-roman(大罗马数字)、lower-alpha(小写英文)、upper-alpha(大写英文)--&gt;</span><br><span class="line">list-style-type</span><br><span class="line">&lt;!-- 图像列表标记 --&gt;</span><br><span class="line">list-style-image</span><br><span class="line">&lt;!-- 列表标记位置 </span><br><span class="line">     inside(文本内环绕文本向标记对齐)、outside(默认值，标记向左对齐) --&gt;</span><br><span class="line">list-style-position</span><br><span class="line">&lt;!-- 边框 宽度+样式+颜色 --&gt;</span><br><span class="line">border</span><br><span class="line">&lt;!-- 边框宽度 --&gt;</span><br><span class="line">border-right</span><br><span class="line">&lt;!-- 边框样式 --&gt;</span><br><span class="line">border-style</span><br><span class="line">&lt;!-- 边框颜色 --&gt;</span><br><span class="line">border-color</span><br><span class="line">&lt;!-- 外边距 盒子间的距离--&gt;</span><br><span class="line">margin</span><br><span class="line">&lt;!-- 内边距 内容与边框间的距离 --&gt;</span><br><span class="line">padding</span><br><span class="line">&lt;!-- 圆角 --&gt;</span><br><span class="line">border-radius</span><br><span class="line">&lt;!-- 阴影 --&gt;</span><br><span class="line">box-shadow</span><br><span class="line">&lt;!-- 显示框类型 </span><br><span class="line">     none(不显示)、block(块状显示)、inline(行内显示)、inline-block(行内块)、list-item(转为列表显示) --&gt;</span><br><span class="line">display</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>鼠标形状<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cursor属性</span><br><span class="line">  default(默认箭头光标)</span><br><span class="line">  auto(默认浏览器光标)</span><br><span class="line">  crosshair(十字光标)</span><br><span class="line">  pointer(小手光标)</span><br><span class="line">  move(移动光标)</span><br><span class="line">  text(文本光标)</span><br><span class="line">  wait(沙漏/表光标)</span><br><span class="line">  help(问号/气球光标)</span><br><span class="line">  n-resize(矩形框向上移光标)</span><br><span class="line">  s-resize(矩形框向下移光标)</span><br><span class="line">  w-resize(矩形框向左移光标)</span><br><span class="line">  e-resize(矩形框向右移光标)</span><br><span class="line">  ne-resize(矩形框向上向右移光标)</span><br><span class="line">  nw-resize(矩形框向上向左移光标)</span><br><span class="line">  se-resize(矩形框向下向右移光标)</span><br><span class="line">  sw-resize(矩形框向下向左移光标)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html常用标签</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>HTML全称为Hyper Text MarkUp Language，是一个超文本标记语言。<br>HTML文本是由HTML命令说明文字、图形、动画、声音、表格、链接等组成的描述性文本，通过标签将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。</p><p>资源：MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p><p>HTML标签: 用来描述网页<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//双标签</span><br><span class="line">&lt;标签名&gt;标签内容&lt;/标签名&gt;  </span><br><span class="line">//单标签</span><br><span class="line">&lt;标签名 /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>HTML基本结构<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 声明语言 --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">    &lt;!-- 网页元数据配置--&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;!-- 设置网页字符集，防乱码 ASKII、ISO8859-1、GBK、GB2312、UTF-8 --&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;!-- 设置网页描述 --&gt;</span><br><span class="line">      &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;</span><br><span class="line">      &lt;!-- 设置网页关键字 --&gt;</span><br><span class="line">      &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;</span><br><span class="line">      &lt;!-- 设置请求重定向 --&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;refresh&quot; content=&quot;秒数;url=跳转的地址&quot;/&gt;</span><br><span class="line">      &lt;!-- 标题栏文字 --&gt;</span><br><span class="line">      &lt;title&gt;网页标题&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;!-- 网页主体 --&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">      页面内容</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>标签分为块级元素和行级元素<br>块级元素：独占一行，换行显示，可设宽高，否则占据继承父元素宽度；<br>行级元素：行内显示，与其他行内元素并排显示，不可设宽高（除img、input）</p><p>常用标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标题标签 --&gt;</span><br><span class="line">&lt;h1&gt;&lt;/h1&gt; --- &lt;h6&gt;&lt;/h6&gt;</span><br><span class="line">&lt;!-- 段落标签 --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;!-- 换行标签 --&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;!-- 水平线 --&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;!-- 图像标签 支持bmp、jpg、gif、png等格式</span><br><span class="line">  BMP：Windows位图，可以用（从黑白到24位）任何颜色深度，存储单个光栅图像。</span><br><span class="line">  JPG：全称Joint Photographic Experts Group(联合图像专家组),扩展名为.jpg或.jpeg,图像品质高，下载速度快。</span><br><span class="line">  GIF：全称Graphics Interchange Format（图像互换格式），是CompuServe公司在1987年开发的，特点是压缩比高，磁盘空间占用较少，可制作2D动画文件。</span><br><span class="line">  PNG：全称Portable Network Graphics（可移植性网络图像），能提供长度比GIF小30%的无损压缩图像文件，图片高清。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;img src=&quot; 图片地址 &quot; alt=&quot;  &quot;&gt;</span><br><span class="line">&lt;!-- 超链接 可做锚点、发邮件、打电话等 --&gt;</span><br><span class="line">&lt;a href=&quot; 路径 &quot; target=&quot; 跳转目标位置 _blank(新窗口)、_self(当前窗口) &quot; name=&quot; 锚点名(例：tel:110 / mailto:111@qq.com) &quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 输入框 --&gt;</span><br><span class="line">&lt;input type=&quot; text(文本)、password(密码)、radio(单选框)、checkbox(复选框)、image(选择图片)、button(按钮)、file(文件)、reset(清空重置)、submit(提交)&quot;&gt;</span><br><span class="line">&lt;!-- 斜体 --&gt;</span><br><span class="line">&lt;em&gt; / &lt;i&gt;</span><br><span class="line">&lt;!-- 粗体 --&gt;</span><br><span class="line">&lt;strong&gt; / &lt;b&gt;</span><br><span class="line">&lt;!-- 标注 比父元素小一个字号,常用于注意事项或版权信息的旁注 --&gt;</span><br><span class="line">&lt;small&gt;</span><br><span class="line">&lt;!-- 上标 --&gt;</span><br><span class="line">&lt;sup&gt;</span><br><span class="line">&lt;!-- 下标 --&gt;</span><br><span class="line">&lt;sub&gt;</span><br><span class="line">&lt;!-- 插入内容,带下划线 --&gt;</span><br><span class="line">&lt;ins&gt;</span><br><span class="line">&lt;!-- 删除内容，带删除线 --&gt;</span><br><span class="line">&lt;del&gt;</span><br><span class="line">&lt;!-- 预格式文本 --&gt;</span><br><span class="line">&lt;pre&gt; / &lt;code&gt;</span><br><span class="line">&lt;!-- 无序列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!-- 有序列表 reversed=&quot;reversed&quot;(倒序) --&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;!-- 自定义列表 --&gt;</span><br><span class="line">&lt;dl type=&quot;disc(实心圆)、circle(空心圆)、square(实心方块)、decimal(数字)&quot;&gt;</span><br><span class="line">  &lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line">&lt;!-- 表单域 --&gt;</span><br><span class="line">&lt;form name=&quot;名字&quot; method=&quot;方法  get/post&quot; action=&quot;行动 url路径&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;!-- 表单元素 </span><br><span class="line">     placeholder(水印输入提示)、readonly(只读)、checked(选项框默认选中)、selected(下拉框默认选中)、required(必填)、disabled(失效)、value(表单初始值)、name(名字，区分表单数据)、type(类型) --&gt;</span><br><span class="line">&lt;input /&gt;</span><br><span class="line">&lt;!-- 文本域 --&gt;</span><br><span class="line">&lt;textarea&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;!-- 下拉框 --&gt;</span><br><span class="line">&lt;select&gt;</span><br><span class="line">  &lt;option&gt;下拉选项&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;!-- 表格 </span><br><span class="line">     border(外层边框)、cellspacing(单元格间距)、cellpadding(内容与框的间距)、width(宽)、height(高，临界值)、bgcolor(背景颜色)、background(背景图)、align(水平对齐方式，left,center,right)、valign(垂直对齐方式，top,center,bottom)、colspan(从左到右，横向合并)、rowspan(从上到下，纵向合并)--&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;caption&gt;标题&lt;/caption&gt;</span><br><span class="line">  &lt;thead&gt;表头&lt;/thead&gt;</span><br><span class="line">  &lt;tbody&gt;主体内容&lt;/tbody&gt;</span><br><span class="line">  &lt;th&gt;表头单元格&lt;/th&gt;</span><br><span class="line">  &lt;tr&gt; 行</span><br><span class="line">    &lt;td&gt;单元格&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>特殊字符<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">空格：&amp;nbsp</span><br><span class="line">小于：&amp;lt</span><br><span class="line">大于：&amp;gt</span><br><span class="line">与：&amp;amp</span><br><span class="line">双引：&amp;quot</span><br><span class="line">单引：&amp;apos</span><br><span class="line">人民币：&amp;yen</span><br><span class="line">分：&amp;cent</span><br><span class="line">镑：&amp;pound</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Axios</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p>axios请求</p><p>基于promise的HTTP库，常用在浏览器和Node.js中。</p><p>官网：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a><br>中文地址：<a href="http://www.axios-js.com/zh-cn/docs/">http://www.axios-js.com/zh-cn/docs/</a>  </p><p>请求配置信息：<a href="http://www.axios-js.com/zh-cn/docs/">http://www.axios-js.com/zh-cn/docs/</a></p><p>安装</p><p>CDN方式<br><a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p><p>npm方式</p><p>npm install axios</p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//创建实例  </span><br><span class="line">axios.create([config]) </span><br><span class="line">//拦截器</span><br><span class="line">//请求拦截器,更新请求头</span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">// 发送请求前</span><br><span class="line">(config) =&gt; &#123;</span><br><span class="line">//设置请求头</span><br><span class="line">if (store.getters.token) &#123;</span><br><span class="line">config.headers[&#x27;token&#x27;] = store.getters.token;</span><br><span class="line">&#125;</span><br><span class="line">return config</span><br><span class="line">&#125;,</span><br><span class="line">// 请求错误后</span><br><span class="line">(error) =&gt; &#123;</span><br><span class="line">return Promise.reject(error)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">//响应拦截器,获取新的访问令牌</span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">//响应前</span><br><span class="line">(config) =&gt; &#123;</span><br><span class="line">return config</span><br><span class="line">&#125;,</span><br><span class="line">//响应错误后</span><br><span class="line">(error) =&gt; &#123;</span><br><span class="line">return Promise.reject(error)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import store from &#x27;store&#x27;</span><br><span class="line">// 创建axios实例，设置基本配置  axios create</span><br><span class="line">export const instance = axios.create(&#123;</span><br><span class="line">  // 基本请求路径</span><br><span class="line">  baseURL: &#x27;http://localhost:8808/system&#x27;,</span><br><span class="line">  // 请求时长</span><br><span class="line">  timeout: 5000</span><br><span class="line">&#125;)</span><br><span class="line">// 请求拦截器,更新请求头  axios.interceptors.request.use()</span><br><span class="line">// 发送请求前   config =&gt; &#123;&#125;  请求错误后  error =&gt; &#123;&#125;</span><br><span class="line">instance.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">  if (config.url === &#x27;/login&#x27;) &#123;</span><br><span class="line">    return config</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(store.state.token);</span><br><span class="line">    // 请求头，设置访问令牌token   config.headers</span><br><span class="line">    config.headers[&#x27;token&#x27;] = store.state.token;</span><br><span class="line">    return config</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line">// 响应拦截器,获取新的访问令牌  axios.interceptors.response.use(响应前，响应错误后)</span><br><span class="line">instance.interceptors.response.use((config) =&gt; &#123;</span><br><span class="line">  return config</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后台管理系统</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h1><h3 id="建立vue项目"><a href="#建立vue项目" class="headerlink" title="建立vue项目"></a>建立vue项目</h3><p>vue create 项目名</p><p>npm run serve</p><h3 id="安装element-ui组件库"><a href="#安装element-ui组件库" class="headerlink" title="安装element-ui组件库"></a>安装element-ui组件库</h3><p>npm i element-ui -S</p><p>导入组件库</p><h3 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h3><p>npm i axios</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//App.vue留&lt;router-view /&gt;</span><br><span class="line">//main.js引入所需文件</span><br></pre></td></tr></table></figure><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 配接口文档 Api.js</span><br><span class="line">import &#123; instance as http &#125; from &#x27;@/utils/http.js&#x27;</span><br><span class="line">//查删改查</span><br><span class="line">export const 名 = (参数, params) =&gt; &#123;</span><br><span class="line">return http.请求方式(`接口`, params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//配路由文件 router/index.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">const routers = [</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/&#x27;,</span><br><span class="line">name: &#x27;login&#x27;,</span><br><span class="line">component: () =&gt; import(&#x27;@/views/LoginView.vue&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/home&#x27;,</span><br><span class="line">name: &#x27;home&#x27;,</span><br><span class="line">component: () =&gt; import(&#x27;@/views/HomeView.vue&#x27;)</span><br><span class="line">children:[</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;menu&#x27;,</span><br><span class="line">name: &#x27;menu&#x27;,</span><br><span class="line">component: () =&gt; import(&#x27;@/views/MenuView.vue&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes</span><br><span class="line">&#125;)</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//配store/index.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">import router from &#x27;@/router&#x27;</span><br><span class="line">import &#123;login&#125; from &quot;@/api/loginApi.js&quot;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line">token: &#x27;&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;&#125;,</span><br><span class="line">mutations: &#123;</span><br><span class="line">LOGIN(state, date) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">let &#123;code, msg, data: &#123;token&#125;&#125; = data;</span><br><span class="line">if (code === 2000) &#123;</span><br><span class="line">state.token = token;</span><br><span class="line">router.push(&#x27;/home&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">SET_TOKEN(state, token) &#123;</span><br><span class="line">state.token = token;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;&#125;,</span><br><span class="line">modules: &#123;</span><br><span class="line">async login(&#123;commit&#125;, payload) &#123;</span><br><span class="line">console.log(payload);</span><br><span class="line">let &#123;data&#125; = await login(payload);</span><br><span class="line">commit(&quot;LOGIN&quot;, data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="五"><a href="#五" class="headerlink" title="五"></a>五</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//配utils/http.js</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import store from &#x27;@/store&#x27;</span><br><span class="line">export const instance = axios.create(&#123;</span><br><span class="line">baseURL: &#x27;http://localhost:8808/system&#x27;,</span><br><span class="line">timeout: 5000</span><br><span class="line">&#125;)</span><br><span class="line">instance.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">if (config.url === &#x27;/login&#x27; || config.url === &#x27;/register&#x27;) &#123;</span><br><span class="line">return config</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(store.state.token);</span><br><span class="line">config.headers[&#x27;token&#x27;] = store.state.token;</span><br><span class="line">return config</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">(error) =&gt; &#123;</span><br><span class="line">return Promise.reject(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="六"><a href="#六" class="headerlink" title="六"></a>六</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">template:</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">import &#123;对应接口文档中的增删改查名&#125; from &#x27;@/api/roleApi.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">async mounted() &#123;</span><br><span class="line">this.initData();</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">queryCondition: &#123;&#125;,</span><br><span class="line">dialogFormVisible: false,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>根据不同权限对应不同路由，异步动态生成侧边栏。</p><p>登录：用户输入账号和密码后，发送给服务器验证，通过后返回访问令牌token,将token存储到cookie中，使页面刷新后保留登录状态，根据token拉取接口获取用户权限信息。</p><p>权限验证：通过token获取用户角色，根据角色动态判断对应权限路由，在router.addRoutes上挂载。</p><p>Vuex全局管理控制，页面刷新后Vuex内容会丢失，需重复操作</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax技术"><a href="#Ajax技术" class="headerlink" title="Ajax技术"></a>Ajax技术</h2><p>全称为Asynchronnous Javascript And XML，即异步JavaScript和XML。</p><p>在网页中利用XMLHttpRequest 网页对象和服务器进行数据交互的方式。</p><p>Ajax技术：提升效率，节省数据，局部刷新页面 </p><p>适用于：对注册登录页面进行动态检测验证、动态刷新加载资源数据、数据的增删改查交互</p><p>上网：通过互联网的形式获取和消费资源。</p><p>服务器：因特网中负责存放和对外提供资源。</p><p>客户端：因特网中负责获取和消费资源，通过安装浏览器的形式，访问服务器对外提供的资源。</p><h2 id="url地址"><a href="#url地址" class="headerlink" title="url地址"></a>url地址</h2><p>全称为UniformResourcelLocator即统一资源定位符，用于标识互联网每个资源唯一存放位置。</p><p>浏览器通过URL地址，才能正确定位资源存放位置，从而成功访问对应资源。</p><p>url一般由客户端与服务器间的通信协议、存资源的服务器名称、资源在服务器上的具体存放位置三部分组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://通信协议</span><br><span class="line">www.cnblogs.com/服务器名称</span><br><span class="line">liulongbinblogs/p/11649393.html资源存放位置</span><br></pre></td></tr></table></figure><p>客户端与服务器间的通信过程，分为请求—处理—响应三步。</p><p>网页资源通过请求—处理—响应方式从服务器获取。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>网页请求服务器上数据资源。</p><p>XMLHttpRequest对象简称xhr,是浏览器提供的JS成员，可以请求服务器上的数据资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var xhrObj = new XMLHttpRequest()</span><br></pre></td></tr></table></figure><h2 id="数据资源请求方式"><a href="#数据资源请求方式" class="headerlink" title="数据资源请求方式"></a>数据资源请求方式</h2><h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><p>根据URL地址，获取服务器资源</p><h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>向服务器提交数据资源</p><h2 id="JQuery：-get-post-ajax"><a href="#JQuery：-get-post-ajax" class="headerlink" title="JQuery：$.get()    $.post()    $.ajax()"></a>JQuery：$.get()    $.post()    $.ajax()</h2><h3 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h3><p>发送get请求，将服务器的资源获取到客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//url 参数类型为string要请求的资源地址，接口</span><br><span class="line">//data参数类型为object数据参数</span><br><span class="line">//callback参数类型为function请求成功后的回调函数</span><br><span class="line">//$.get(url, [data], [callback])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//带参</span><br><span class="line">$.get(&#x27;http://localhost:3000&#x27;, &#123;id:1&#125;, function(res) &#123;</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//不带参</span><br><span class="line">$.get(&#x27;http://localhost:3000&#x27;, function(res) &#123;</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3><p>向服务器提交数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//$.post(url, [data], [callback])</span><br></pre></td></tr></table></figure><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>综合函数功能较全，可对Ajax请求进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type: &#x27;GET&#x27;,//请求方式get/post</span><br><span class="line">url: &#x27;http://localhost:3000&#x27;,//url请求地址</span><br><span class="line">data: &#123; id:1 &#125;,//请求数据</span><br><span class="line">success: function(res) &#123;//请求成功后的回调函数</span><br><span class="line">console.log(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>安装node和nodemon</p><p>找到极果网package.json打开终端</p><p>命令行 npm  启动后台</p><p>浏览器打开 <a href="http://localhost:3000">http://localhost:3000</a> </p><p>网页地址输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function Date() &#123;</span><br><span class="line">//创建对象</span><br><span class="line">    var Ajax = new XMLHttpRequest() || new ActiveXObject(&#x27;Microsoft.XMLHTT&#x27;);</span><br><span class="line">//建立连接</span><br><span class="line">    Ajax.open(&#x27;get&#x27;, &#x27;http://localhost:3000/report/new&#x27;， true)；</span><br><span class="line">//发送请求</span><br><span class="line">    Ajax.send();</span><br><span class="line">//接收服务器数据</span><br><span class="line">    Ajax.onreadystatechange = function() &#123;</span><br><span class="line">        if(Ajax.readyState == 4) &#123;</span><br><span class="line">            if(Ajax.status == 200) &#123;</span><br><span class="line">                console.log(Ajax.responseText);        </span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&#x27;连接失败&#x27;)；                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Date();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>静态网页 &amp; 动态网页</title>
      <link href="/posts/e1cf082f.html"/>
      <url>/posts/e1cf082f.html</url>
      
        <content type="html"><![CDATA[<p>静态内容网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  静态内容网站</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面被写死，固定数据不变</p><p>静态—动态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  静态--动态</span><br><span class="line">  //页面变量占位符</span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  //vue实例对象</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">  //视图</span><br><span class="line">  el:&#x27;#box&#x27;,</span><br><span class="line">  //变量数据</span><br><span class="line">  data:&#123;</span><br><span class="line">  name:&#x27;hhh&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  //事件处理函数方法</span><br><span class="line">  methods:&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;box&quot;&gt;</span><br><span class="line">  //绑定事件</span><br><span class="line">  &lt;div v-on:click=&quot;changeName&quot;&gt;</span><br><span class="line">  静态--动态</span><br><span class="line">  &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  let vm = new Vue(&#123;</span><br><span class="line">  el:&#x27;#box&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">  name:&#x27;hhh&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  //生命周期刷新页面函数触发一次</span><br><span class="line">  beforeCreate:function()&#123;</span><br><span class="line">  this.getDate();</span><br><span class="line">  &#125;</span><br><span class="line">  methods:&#123;</span><br><span class="line">  changeName:function() &#123;</span><br><span class="line">  this.name=&#x27;哈哈哈&#x27;;</span><br><span class="line">  &#125;,</span><br><span class="line">  getDate:function()&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>动态内容网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//html页面</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//js代码数据变化，效果函数方法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">el=&#x27;#box&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">//css样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>把页面中需要根据数据请求结果动态变化的内容用变量或占位符代替</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由</title>
      <link href="/posts/f9dcef3a.html"/>
      <url>/posts/f9dcef3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="router-路由"><a href="#router-路由" class="headerlink" title="router 路由"></a>router 路由</h1><p>页面导航，本质是Hash地址和组件间的对应关系</p><p>实现不同组件功能间的切换展示。</p><p>用户点击页面路由链接，导致URL地址栏的Hash值发生改变，前端路由监听到变化，将最新的Hash地址对应的组件渲染到浏览器。</p><h2 id="前端路由的实现"><a href="#前端路由的实现" class="headerlink" title="前端路由的实现"></a>前端路由的实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//渲染组件</span><br><span class="line">&lt;component :is=&quot;指定展示组件名&quot;&gt;&lt;/component&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &#x27;App&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">comName: &#x27;被展示组件名&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//App.vue组件，超链接添加Hash值</span><br><span class="line">&lt;a href=&quot;#/home&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#/movie&quot;&gt;Movie&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">//在生命周期created函数中，监听浏览器地址栏的Hash变化，动态切换要展示的Hash地址变化</span><br><span class="line">created() &#123;</span><br><span class="line">window.onhashchange = () =&gt; &#123;</span><br><span class="line">switch(location.hash) &#123;</span><br><span class="line">case &#x27;#/home&#x27;:</span><br><span class="line">this.comName = &#x27;Home&#x27;;</span><br><span class="line">break;</span><br><span class="line">case &#x27;#/movie&#x27;:</span><br><span class="line">this.comName = &#x27;Movie&#x27;;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm i vue-router -S</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建路由模块src中新建router/index.js</span><br><span class="line">//导入包</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;;</span><br><span class="line">//将VueRouter安装为Vue插件调用Vue.use()函数</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line">//创建路由实例对象</span><br><span class="line">const router = new VueRouter();</span><br><span class="line">//共享路由实例</span><br><span class="line">export default router;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//导入并挂载路由模块src中的main.js</span><br><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;;</span><br><span class="line">import router from &#x27;@/router&#x27;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">render: h =&gt; h(App),</span><br><span class="line">//挂载</span><br><span class="line">router: router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//声明路由链接和占位符src中App.vue组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;app-container&quot;&gt;</span><br><span class="line">&lt;h1&gt;组件&lt;/h1&gt;</span><br><span class="line">//定义路由模块</span><br><span class="line">&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/movie&quot;&gt;哈哈&lt;/router-link&gt;</span><br><span class="line">//定义路由占位符</span><br><span class="line">&lt;route-view&gt;&lt;route-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//声明路由匹配规则src中router/index.js</span><br><span class="line">//导入需使用路由切换展示的组件</span><br><span class="line">import Home from &#x27;@/components/Home.vue&#x27;;</span><br><span class="line">import Movie from &#x27;@/components/Movie.vue&#x27;;</span><br><span class="line">//创建路由实例对象</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">//routes[]声明路由匹配规则path 需匹配的Hash地址component 需展示的路由组件</span><br><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/home&#x27;,</span><br><span class="line">component: Home</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/movie&#x27;,</span><br><span class="line">component: Movie</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>用户访问一个地址时，强制用户跳转到另一个地址，展示特定组件页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//设置路由重定向，指定新的路由地址redirect属性</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">//用户访问/时，通过redirect跳转到/home对应的路由规则</span><br><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/&#x27;,</span><br><span class="line">redirect: &#x27;/home&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>实现组件嵌套展示</p><p>点击父级路由链接显示包含子级路由链接的模板内容，点击子级路由链接显示子级模板内容。</p><h3 id="声明子路由链接和占位符"><a href="#声明子路由链接和占位符" class="headerlink" title="声明子路由链接和占位符"></a>声明子路由链接和占位符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//About.vue组件声明子路由链接和子路由占位符</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;about-container&quot;&gt;</span><br><span class="line">&lt;h2&gt;组件&lt;/h2&gt;</span><br><span class="line">//声明子路由链接</span><br><span class="line">&lt;router-link to=&quot;/about/tab&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">//声明子路由占位符</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//导入组件，children属性嵌套声明子路由规则src中router/index.js</span><br><span class="line">import Tab from &#x27;@/components/tabs/tab.vue&#x27;;</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes: [</span><br><span class="line">//父级路由</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/about&#x27;,</span><br><span class="line">component: /about,</span><br><span class="line">children:[</span><br><span class="line">//子级路由</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;tab&#x27;,</span><br><span class="line">component: Tab</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>路由规则复用性差</p><p>提高路由规则复用性，把Hash地址可变部分定为参数项</p><p>动态参数        ：参数名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//合并前</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/movie/1&#x27;,</span><br><span class="line">component: Movie</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/movie/2&#x27;,</span><br><span class="line">component: Movie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//合并后</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/movie/:id&#x27;,</span><br><span class="line">component: Movie</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问动态匹配的参数值，用this.$route.params对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;movie-container&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">//this.$route 路由参数对象</span><br><span class="line">&#123;&#123;this.$route.params.id&#125;&#125;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &#x27;Movie&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>获取路由参数可在路由规则中props传参</p><p>定义路由规划时，声明 props : true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//以props形式接收路由规则匹配到的参数项</span><br><span class="line">&#123;</span><br><span class="line">path: &#x27;/movie/:id&#x27;,</span><br><span class="line">component: Movie,</span><br><span class="line">props: true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用props中的路由参数</span><br><span class="line">&lt;templater&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&#123;&#123;id&#125;&#125;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/templater&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">//接收路由规则匹配的参数项</span><br><span class="line">props: [&quot;id&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><h4 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h4><p>浏览器中点击链接实现导航的方式</p><p>例如：超链接、router-link</p><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>浏览器中调用API方法实现导航的方式</p><p>例如：location.href</p><h5 id="router-push"><a href="#router-push" class="headerlink" title="$router.push()"></a>$router.push()</h5><p>跳转到指定hash地址，展示组件页面，增加一条历史记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;templater&gt;</span><br><span class="line">&lt;div class=&quot;home-container&quot;&gt;</span><br><span class="line">&lt;h2&gt;组件&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;gotMovie&quot;&gt;跳转&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/templater&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">gotMovie() &#123;</span><br><span class="line">this.$router.push(&#x27;/movie/1&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="router-replace"><a href="#router-replace" class="headerlink" title="$router.replace()"></a>$router.replace()</h5><p>跳转到指定hash地址，展示组件页面，替换当前历史记录</p><h5 id="router-go"><a href="#router-go" class="headerlink" title="$router.go()"></a>$router.go()</h5><p>实现导航历史前进、后退</p><p>$router.back()    浏览器历史记录返回上一层页面</p><p>$router.forward()    浏览器历史记录前进一层页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;templater&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&#123;&#123;id&#125;&#125;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">&lt;/templater&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">props:[</span><br><span class="line">&#x27;id&#x27;</span><br><span class="line">],</span><br><span class="line">methods: &#123;</span><br><span class="line">//返回上一个组件页面</span><br><span class="line">goBack() &#123;</span><br><span class="line">this.$router.go(-1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>控制路由访问权限</p><h5 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h5><p>控制路由访问权限，当路由导航跳转时，触发全局前置守卫</p><p>声明全局前置守卫,调用beforeEach()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建路由实例</span><br><span class="line">const router = new VueRouter(&#123;...&#125;);</span><br><span class="line">//路由导航跳转时，自动触发回调函数fn</span><br><span class="line">router.berforEach(fn);</span><br><span class="line">//to 将要访问的路由信息对象from 将要离开的路由信息对象next函数 直接调用时，放行允许路由导航访问</span><br><span class="line">router.berforEach((to, from, next) =&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><h5 id="next函数调用"><a href="#next函数调用" class="headerlink" title="next函数调用"></a>next函数调用</h5><p>用户有后台主页访问权限时，直接放行</p><p>next()</p><p>用户没有后台主页访问权限时，强制跳转到登录页面</p><p>next(‘/login’)</p><p>用户没有后台主页访问权限时，不允许跳转到后台主页</p><p>next(false)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.berforEach((to, from, next) =&gt; &#123;</span><br><span class="line">if (to.path === &#x27;/main&#x27;) &#123;</span><br><span class="line">const token = localstorage.getItem(&#x27;token&#x27;);</span><br><span class="line">if (token) &#123;</span><br><span class="line">//访问后台主页  有token值</span><br><span class="line">next();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//访问后台主页  没有token值</span><br><span class="line">next(&#x27;/login&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//不访问后台主页  放行</span><br><span class="line">next();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">App有什么，页面就显示什么</span><br><span class="line"></span><br><span class="line">路由组件，随页面变化而变化</span><br><span class="line"></span><br><span class="line">//最大的组件  其余均为子组件</span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//在App中显示路由计算的过程，跟随url变化成对应组件显示</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基础路由</span><br><span class="line">//app.vue中</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/posts/4896de77.html"/>
      <url>/posts/4896de77.html</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot; 用户名 &quot;</span><br><span class="line">$ git config --global user.email &quot; 邮箱 &quot; </span><br></pre></td></tr></table></figure><h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p>在git中复制文件链接</p><p>找到或新建专门下载gitee文件的文件夹</p><p>在文件夹搜索框搜cmd，打开命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//克隆</span><br><span class="line">$ git clone   </span><br></pre></td></tr></table></figure><h2 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h2><p>将新文件粘贴到克隆下来的仓库文件</p><p>文件右击选择git bash here打开命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status    查看状态</span><br><span class="line">$ git add .   添加所有文件</span><br><span class="line">$ git status    再次查看状态</span><br><span class="line">$ git commit -m +关键字  更新修改说明及内容</span><br><span class="line">$ git push    推送到服务器</span><br></pre></td></tr></table></figure><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull   拉取服务器最新代码</span><br></pre></td></tr></table></figure><p><img src="C:\Users\不敬业的大眠\AppData\Roaming\Typora\typora-user-images\image-20230227092505897.png" alt="image-20230227092505897"></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>资源加载/打包工具（项目构建工具）</p><p>npm 存储各种包管理器的云端仓库</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//全局安装</span><br><span class="line">npm i webpack -g</span><br><span class="line"></span><br><span class="line">//项目依赖安装</span><br><span class="line">npm install --save-dev webpack-cli -g</span><br><span class="line"></span><br><span class="line">//最终安装-D开发模式-S生产模式</span><br><span class="line">npm i webpack webpack-cil -D</span><br><span class="line"></span><br><span class="line">//卸载</span><br><span class="line">npm uninstall -g webpack-cli</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>创建项目文件夹    内需含src和pubilc文件</p><p>dist 放置打包后的文件   </p><p>pubilc 放置静态资源</p><p>src 放置源码</p><p>打开项目根目录的命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">空目录npm init -y</span><br><span class="line"></span><br><span class="line">建src文件夹放css,js</span><br><span class="line">建public文件夹放html</span><br><span class="line">导入jqnpm i jquery</span><br><span class="line"></span><br><span class="line">在js文件夹写代码</span><br><span class="line">import 接收者  from &#x27;导入包&#x27;</span><br><span class="line"></span><br><span class="line">打包  webpack</span><br><span class="line">webpack ./src/index.js -o ./dist/</span><br><span class="line"></span><br><span class="line">html中导入js,运行</span><br><span class="line"></span><br><span class="line">package.json文件中script添加</span><br><span class="line">&quot;dev&quot;: &quot;webpack&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack ./src/index.js -o ./dist/&quot;</span><br><span class="line"></span><br><span class="line">运行npm run test     npm run dev</span><br><span class="line"></span><br><span class="line">新建webpack.config.js文件</span><br><span class="line">//导入模块</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">//Node.js导出语法，导出webpack配置对象  module.exports = &#123; &#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  //配置打包模式</span><br><span class="line">  mode: &#x27;development&#x27;,</span><br><span class="line">  //配置入口文件   __dirname当前模块目录名</span><br><span class="line">  entry: path.join(__dirname, &#x27;./src/index.js&#x27;),</span><br><span class="line">  // 配置输出文件</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    // 配置输出的文件名</span><br><span class="line">    filename: &#x27;bundle.js&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">安装插件 npm i clean-webpack-plugin -D</span><br><span class="line">//webpack.config.js文件</span><br><span class="line">let &#123;CleanWebpackPlugin&#125; = require(&#x27;clean-webpack-plugin&#x27;);</span><br><span class="line">plugins:[</span><br><span class="line">new CleanWebpackPlugin()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装插件  npm i webpack-dev-server -D</span><br><span class="line">//webpack.config.js文件</span><br><span class="line">devServer: &#123;</span><br><span class="line">static: &#123;</span><br><span class="line">//html放置位置</span><br><span class="line">directory: path.join(__dirname, &#x27;public&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">    port: 80,</span><br><span class="line">    //项目部署的ip地址 默认本机</span><br><span class="line">    host: &#x27;localhost&#x27;,</span><br><span class="line">    //编译成功后，自动打开浏览器</span><br><span class="line">    open: true,</span><br><span class="line">    hot: true,</span><br><span class="line">    //设置端口号</span><br><span class="line">    port: 9000,</span><br><span class="line">    //启用gzip压缩</span><br><span class="line">    compress: true</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //package.json文件script中</span><br><span class="line">  &quot;serve&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">  </span><br><span class="line">  运行npm run serve</span><br><span class="line">  y</span><br><span class="line">  改js路径</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  安装插件npm i html-webpack-plugin -D</span><br><span class="line">  //webpack.config.js文件</span><br><span class="line">  let HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">  plugins:[</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: path.join(__dirname, &quot;public/index.html&quot;),</span><br><span class="line">dilename: &#x27;index.html&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">   运行npm run serve</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a>打包css文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">新建css文件，写样式</span><br><span class="line"></span><br><span class="line">在index.js中，引入css模块</span><br><span class="line"> import &#x27;./index.css&#x27;;</span><br><span class="line">  $(function()&#123;</span><br><span class="line">    $(&#x27;div&#x27;).css(&#123;</span><br><span class="line">        height:&#x27;200px&#x27;,</span><br><span class="line">        width:&#x27;200px&#x27;,</span><br><span class="line">        background:&#x27;skyblue&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  安装loader加载器插件</span><br><span class="line">  npm i style-loader css-loader --save-dev</span><br><span class="line">  运行npm run serve</span><br><span class="line">  </span><br><span class="line">  //webpack.config.js文件</span><br><span class="line">  module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">  &#123;</span><br><span class="line">  //匹配文件处理模块  从后向前调用</span><br><span class="line">  test: /\.css$/, </span><br><span class="line">  use: [</span><br><span class="line">  &#x27;style-loader&#x27;,</span><br><span class="line">            &#x27;css-loader&#x27;</span><br><span class="line">            ]</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="打包less文件"><a href="#打包less文件" class="headerlink" title="打包less文件"></a>打包less文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">新建less文件</span><br><span class="line">body&#123;</span><br><span class="line">    background-color: rgb(27, 98, 107);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在index.js中，引入less模块</span><br><span class="line">import &#x27;./demo.less&#x27;;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&#x27;div&#x27;).css(&#123;</span><br><span class="line">        height:&#x27;200px&#x27;,</span><br><span class="line">        width:&#x27;200px&#x27;,</span><br><span class="line">        background:&#x27;skyblue&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">安装 npm i less-loader less --save-dev</span><br><span class="line"></span><br><span class="line">//webpack.config.js文件</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123; </span><br><span class="line">test: /\.less$/,</span><br><span class="line">    use: [</span><br><span class="line">    &#x27;style-loader&#x27;, </span><br><span class="line">    &#x27;css-loader&#x27;, </span><br><span class="line">    &#x27;less-loader&#x27;</span><br><span class="line">     ] </span><br><span class="line"> &#125;</span><br><span class="line"> ]</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 运行npm run dev</span><br></pre></td></tr></table></figure><h2 id="打包-sass-文件"><a href="#打包-sass-文件" class="headerlink" title="打包 sass 文件"></a>打包 sass 文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">安装 npm i sass-loader node-sass --save-dev</span><br><span class="line"></span><br><span class="line">//webpack.config.js文件</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.scss$/,</span><br><span class="line">        use: [</span><br><span class="line">        &#x27;style-loader&#x27;,</span><br><span class="line">        &#x27;css-loader&#x27;, </span><br><span class="line">        &#x27;sass-loader&#x27;</span><br><span class="line">        ]</span><br><span class="line">        &#125; </span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组件</title>
      <link href="/posts/34778b46.html"/>
      <url>/posts/34778b46.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli-脚手架"><a href="#vue-cli-脚手架" class="headerlink" title="vue cli    脚手架"></a>vue cli    脚手架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">新建文件夹，运行终端</span><br><span class="line">//安装vue-cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">//检查vue版本</span><br><span class="line">vue --version</span><br><span class="line"></span><br><span class="line">//创建项目命名不支持大写字母</span><br><span class="line">vue create 项目名</span><br><span class="line"></span><br><span class="line">//选择自定义预设</span><br><span class="line">Manually select features</span><br><span class="line"></span><br><span class="line">//手动选择空格选择  a全选  i反选  enter确认</span><br><span class="line">Choose Vue versionvue版本</span><br><span class="line">Babel转码器</span><br><span class="line">TypeScriptts</span><br><span class="line">ProgressiveWeb App (PWA) SupportWeb开发支持</span><br><span class="line">Router路由支持</span><br><span class="line">Vuex状态管理</span><br><span class="line">CSS Pre-processorscss预处理器</span><br><span class="line">Liner / Formatter严格模式</span><br><span class="line">Unit Testing</span><br><span class="line">E2E Testing测试单元</span><br><span class="line"></span><br><span class="line">//选择2.x版本</span><br><span class="line">//选择less </span><br><span class="line">//选择配置信息文件位置并不保存未来项目预设</span><br><span class="line">In dedicated config files</span><br><span class="line"></span><br><span class="line">//切换到项目终端，输入执行命令运行</span><br><span class="line">npm run serve</span><br><span class="line"></span><br><span class="line">//ctrl单击地址，进入视图页面</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看src文件夹的main.js入口文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//渲染函数</span><br><span class="line">render: h =&gt; h()</span><br><span class="line"></span><br><span class="line">//导入$mount()等于el:&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>看src文件夹的后缀为vue的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//后缀为vue的文件代表vue实例对象</span><br></pre></td></tr></table></figure><p>组件文件均放入components文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//编写的组件导入vue实例对象文件中</span><br><span class="line">//在实例对象文件export default的components选项中注册组件</span><br></pre></td></tr></table></figure><p>局部组件：导入</p><p>全局组件：Vue.component()</p><h2 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h2><p>每个组件都是一个独立的作用域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在父组件导入子组件，并注册</span><br><span class="line">调用模板</span><br><span class="line">通过v-bind指令将值传给子组件，通过props接收</span><br></pre></td></tr></table></figure><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><p>将页面可重用部分封装为组件，提升代码复用灵活性和开发效率可维护性。</p><p>组件由template模板结构、js行为script、style组件样式三部分构成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 组件Dom模板结构，定义在&lt;template&gt;节点中</span><br><span class="line">//&lt;script&gt;节点封装组件的js业务逻辑</span><br><span class="line">//组件相关的data数据、methods方法定义到export default对象中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><p>注册名称以短横线和大驼峰命名。</p><p>先注册后使用</p><p>全局注册组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//导入 </span><br><span class="line">import 接收者 from &#x27;导入组件文件&#x27;</span><br><span class="line">//调用vue实例对象的component()方法注册</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.component(&#x27;组件文件名&#x27;, 接收者)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>局部注册组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">components: &#123;</span><br><span class="line">&#x27;my-search&#x27;:Search,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props自定义属性：将数据传递到子组件内部使用，提高组件复用性</p><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>动态切换组件的显示和隐藏</p><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>自动函数</p><h3 id="component"><a href="#component" class="headerlink" title="component"></a>component</h3><p>实现动态组件渲染</p><p>is属性，动态指定渲染组件</p><p>v-if   value</p><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>保持动态组件内部处于缓存冻结状态。</p><p>exclude属性，指定不缓存的组件。</p><p>include属性，指定需被缓存组件，多个组件用‘ ，’分割。</p><p>组件缓存时，触发组件生命周期deactivated函数。</p><p>组件激活时，触发组件生命周期activated函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//生命周期</span><br><span class="line">export default&#123;</span><br><span class="line">//创建</span><br><span class="line">created()&#123;&#125;,</span><br><span class="line">//销毁</span><br><span class="line">destroyed()&#123;&#125;,</span><br><span class="line">//激活</span><br><span class="line">activated()&#123;&#125;,</span><br><span class="line">//缓存</span><br><span class="line">deactivated()&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;comName: &#x27;left&#x27;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;keep-alive include=&quot;Myleft&quot;&gt;</span><br><span class="line">&lt;component :is=&quot;comName&quot;&gt;&lt;component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click=&#x27;comName=&quot;left&quot;&#x27;&gt;哈哈哈&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>开发者封装组件时，给不确定的需被用户指定的部分预留的区域，使组件扩展性更强。</p><p>slot元素，为用户预留内容的占位符，定义插槽</p><p>封装组件没有预留插槽时，用户自定义内容会被丢弃</p><p>可设置默认后备内容，当使用者未指定内容时生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//组件文件</span><br><span class="line">&lt;slot&gt;&lt;slot&gt;</span><br><span class="line"></span><br><span class="line">//显示组件文件</span><br><span class="line">&lt;组件名&gt;哈哈哈哈&lt;/组件名&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>当预留多个插槽节点时，需为插槽指定具体name名称</p><p>未指定名的插槽，默认隐含default名称</p><p>向具名插槽提供内容时，在template元素使用v-slot指令提供名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//组件文件</span><br><span class="line">&lt;slot name=&quot;a&quot;&gt;&lt;slot&gt;</span><br><span class="line"></span><br><span class="line">//显示组件文件</span><br><span class="line">&lt;组件名 slot=&quot;a&quot;&gt;哈哈哈哈&lt;/组件名&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>子向父传值</p><p>封装组件过程中，绑定props数据的插槽</p><p>使用v-slot：接收作用域插槽对外提供的数据</p><p>作用域插槽对外提供数据对象时，使用解构赋值简化数据接收过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot v-for=&#x27;item in list&#x27; :user=&#x27;item&#x27;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">&lt;template v-slot:default=&quot;scope&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;scope&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;template #default=&quot;&#123;user&#125;&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;user.id&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;user.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/posts/71adb096.html"/>
      <url>/posts/71adb096.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>被设计执行特定任务的代码块，将有相同或相似逻辑的代码封装后，通过调用执行。</p><p>提高代码复用率，利于精简代码。</p><h2 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><p>function 函数名 () {</p><p>​    函数体</p><p>}</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数必须调用后，函数体内的代码逻辑才会执行</p><p>一次声明可多次调用</p><p>函数名()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function hello() &#123;</span><br><span class="line">document.write(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">hello();//hi</span><br></pre></td></tr></table></figure><h2 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h2><p>形参：函数内声明的变量</p><p>实参：给声明的变量赋值</p><p>提高函数灵活性</p><h3 id="声明函数-1"><a href="#声明函数-1" class="headerlink" title="声明函数"></a>声明函数</h3><p>function 函数名(参数列表) {</p><p>​    函数体</p><p>}</p><h3 id="函数调用-1"><a href="#函数调用-1" class="headerlink" title="函数调用"></a>函数调用</h3><p>调用函数时，传递多个数据，需用逗号隔开。</p><p>函数名(传递的参数列表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function num(i) &#123;</span><br><span class="line">console.log(i * i);</span><br><span class="line">&#125;</span><br><span class="line">num(5);//25</span><br><span class="line"></span><br><span class="line">function num(i, j) &#123;</span><br><span class="line">console.log(i * j);</span><br><span class="line">&#125;</span><br><span class="line">num(5, 6);//30</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>给形参一个为0的默认值，当缺少实参参数传递时，执行默认值。</p><p>函数优先执行用户传递的实参，当形参变量无值时默认undefined。</p><p>当实参和形参均为undefined时，结果为NaN。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function num(x, y) &#123;</span><br><span class="line">console.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">num();//NaN</span><br><span class="line"></span><br><span class="line">function num(x = 0, y = 0) &#123;</span><br><span class="line">console.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line">num();//0</span><br><span class="line">num(4, 5);//9</span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>当调用函数执行任务结束后，函数返回一个结果，对执行结果扩展性更高。</p><p>return后的代码不再执行，能将函数内部执行结果交给函数外部。</p><p>有返回值的函数没有return时，函数默认返回undefined。</p><p>return 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function num(x, y) &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line">let sum = num(4, 7);</span><br><span class="line">console.log(sum);//11</span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>限定变量名的可用性代码范围，提高了程序逻辑局限性，可靠性，减少变量名冲突。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>作用于所有代码执行环境</p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>作用于函数内代码环境</p><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><p>在函数内部声明的变量，访问范围只在函数内部。</p><p>不同函数内部声明变量无法相互访问，函数执行完毕后，函数内部变量清空。</p><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>使用花括号包裹的代码块内部声明的变量，有可能无法被外部访问。</p><p>var没有块作用域，let、const有块作用域。</p><p>不同代码块之间变量无法相互访问。</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在任何区域都可访问和修改，函数外部let的变量</p><p>为window对象动态添加的属性默认全局，函数未使用关键字声明的变量为全局变量</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>只在当前函数内部访问和修改，函数内部let的变量。</p><p>函数内部的形参可看作局部变量。</p><p>当在函数内部中局部或块级变量未声明直接赋值时，当全局变量看。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>由嵌套关系作用域串联形成的，本质是底层变量查找机制，采用就近原则的方式查找变量最终的值。</p><p>变量访问原则：先局部后全局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function f1() &#123;</span><br><span class="line">     let num = 123;</span><br><span class="line">     function f2() &#123;</span><br><span class="line">       console.log(num);</span><br><span class="line">     &#125;</span><br><span class="line">     f2();</span><br><span class="line">   &#125;</span><br><span class="line">   let num = 456;</span><br><span class="line">   f1();  //123</span><br><span class="line"></span><br><span class="line">function f1() &#123;</span><br><span class="line">     let num = 123;</span><br><span class="line">     function f2() &#123;</span><br><span class="line">       let num = 0;</span><br><span class="line">       console.log(num);</span><br><span class="line">     &#125;</span><br><span class="line">     f2();</span><br><span class="line">   &#125;</span><br><span class="line">   let num = 456;</span><br><span class="line">   f1(); //0</span><br><span class="line"></span><br><span class="line">let a = 1;</span><br><span class="line">   function fn1() &#123;</span><br><span class="line">     let a = 2;</span><br><span class="line">     let b = &#x27;22&#x27;;</span><br><span class="line">     fn2();</span><br><span class="line">     function fn2() &#123;</span><br><span class="line">       let a = 3;</span><br><span class="line">       fn3();</span><br><span class="line">       function fn3() &#123;</span><br><span class="line">         let a = 4;</span><br><span class="line">         console.log(a);   //4</span><br><span class="line">         console.log(b);  //22</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   fn1();</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h3><p>声明: function fn() {}</p><p>调用：fn()</p><h3 id="匿名函数-1"><a href="#匿名函数-1" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>没有名字的函数，无法直接使用</p><p>function () {}</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><h5 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h5><p>将匿名函数赋值给一个变量，通过变量名称调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let fn = function () &#123;</span><br><span class="line"></span><br><span class="line">//函数体</span><br><span class="line"></span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h5 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h5><p>无需调用立即执行，避免全局变量之间的污染，多个立即执行函数用分号隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//方式1</span><br><span class="line">(function () &#123;</span><br><span class="line">console.log(11);</span><br><span class="line">&#125;) ()</span><br><span class="line"></span><br><span class="line">//方式2</span><br><span class="line">(function () &#123;</span><br><span class="line">console.log(11);</span><br><span class="line">&#125; ())</span><br><span class="line"></span><br><span class="line">(function flexible(windoww, document) &#123;</span><br><span class="line">//window.devicePixelRatio  获取当前设备dpr</span><br><span class="line">//获取不到默认取1,移动端获取2执行2</span><br><span class="line">    let dpr = window.devicePixelRatio || 1;</span><br><span class="line">&#125;(window, document))</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>初始化对象，以大写字母开头命名函数，把对象中的相同属性和方法抽出封装到函数里，快速创建多个类似的对象。</p><p>使用 new 实例化构造函数时，没有参数时可以省略 ()。 </p><p>构造函数内部的 return 返回的值无效，返回值为新创建的对象 </p><p>通过构造函数创建的对象为实例对象，实例对象中的属性和方法为实例成员。</p><p>实例对象间互不影响，实例成员为构造函数传入参数，动态创建结构相同但值不同的对象。</p><p> 构造函数名字首字母要大写，不需要return 就可直接返回结果，调用构造函数必须实例化创建一个对象，属性和方法前面必须添加 this。</p><p>function 构造函数名() {</p><p>​    this.属性 = 值;</p><p>​    this.方法 = function() {}</p><p>}</p><p>new 构造函数名();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.hobby = function(hobby) &#123;</span><br><span class="line">console.log(hobby);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let star = new Person(&#x27;小花&#x27;, 10);</span><br><span class="line">console.log(star.name);//小花</span><br><span class="line">console.log(star[&#x27;name&#x27;]);//小花</span><br><span class="line">star.hobby(&#x27;哈哈&#x27;);//哈哈</span><br></pre></td></tr></table></figure><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>相同作用域中，函数声明前调用，使函数的声明调用更灵活。</p><p>函数表达式不存在提升的现象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line">function fn() &#123;</span><br><span class="line">console.log(&#x27;函数提升&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>提升函数应用的灵活度</p><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>arguments(动态参数),是函数内部内置的包含调用函数时传入的所有实参的伪数组变量。</p><p>当不确定传递多少个实参时，用arguments通过for循环动态获取函数传递的实参。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//求生函数，计算所有参数的和</span><br><span class="line">function sum() &#123;</span><br><span class="line">let s = 0;</span><br><span class="line">for (let i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line"> s += arguments[i];</span><br><span class="line">&#125;</span><br><span class="line">console.log(s);</span><br><span class="line">&#125;</span><br><span class="line">sum(2, 4);//6</span><br><span class="line">sum(1, 2, 3);//6</span><br><span class="line">sum(3, 4, 5, 6, 7);//25</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>借…将不定数量的参数表示为一个数组，获取多余实参数组成真数组，写在函数最末形参前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getSum(...other) &#123;</span><br><span class="line">console.log(other);</span><br><span class="line">&#125;</span><br><span class="line">getSum(1, 2, 3);//6</span><br></pre></td></tr></table></figure><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>(…)不修改原数组的情况下，将一个数组展开</p><p>常用在求数组最大最小值、合并数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(...arr);//12345</span><br><span class="line"></span><br><span class="line">//求数组最大最小值</span><br><span class="line">const arr = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(...arr);//123456</span><br><span class="line">console.log(Math.max(...arr));//6</span><br><span class="line">console.log(Math.min(...arr));//1</span><br><span class="line"></span><br><span class="line">//合并数组</span><br><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">const arr2 = [4, 5, 6];</span><br><span class="line">const arr3 = [...arr1, ...arr2];</span><br><span class="line">console.log(arr3);//[1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h2 id="逻辑中断"><a href="#逻辑中断" class="headerlink" title="逻辑中断"></a>逻辑中断</h2><p>满足一定条件后，右边代码不执行</p><p>运算结果为最后被执行的表达式值，常用在变量赋值中</p><h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h3><p>左边为false就短路</p><p>表达式1 为真返回表达式2 ，表达式1为假返回表达式1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(false &amp;&amp; 20) //flase</span><br><span class="line">console.log(5 &lt; 3 &amp;&amp; 20) //flase</span><br><span class="line">console.log(undefined &amp;&amp; 20)//undefined</span><br><span class="line">console.log(null &amp;&amp; 20) //null</span><br><span class="line">console.log(0 &amp;&amp; 20) //0</span><br><span class="line">console.log(10 &amp;&amp; 20)//20</span><br><span class="line">console.log(0 &amp;&amp; 1 + 2 &amp;&amp; 456 * 56789); // 0</span><br><span class="line">console.log(&#x27;&#x27; &amp;&amp; 1 + 2 &amp;&amp; 456 * 56789); // &#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="||"></a>||</h3><p>左边为true就短路</p><p>表达式1为真返回表达式1，表达式1为假返回表达式2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  function num(x, y) &#123;</span><br><span class="line">      x = x || 0;</span><br><span class="line">      y = y || 0;</span><br><span class="line">      console.log(x + y);</span><br><span class="line">    &#125;</span><br><span class="line">   num(1, 2);  //3</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">console.log(false || 20) //20</span><br><span class="line">console.log(5 &lt; 3 || 20) //20</span><br><span class="line">console.log(undefined || 20)//20</span><br><span class="line">console.log(null || 20) //20</span><br><span class="line">console.log(0 || 20) //20</span><br><span class="line">console.log(10 || 20)//10</span><br><span class="line">console.log(123 || 456 || 456 + 123); // 123</span><br><span class="line">console.log(0 || 456 || 456 + 123); // 456</span><br></pre></td></tr></table></figure><h3 id="转换为Boolean型"><a href="#转换为Boolean型" class="headerlink" title="转换为Boolean型"></a>转换为Boolean型</h3><p>除’ ‘、0、undefined、null、false、NaN外，其余转换为布尔值后均为true</p><p>undefined经过数字转换后变为NaN</p><p>null经过数字转换后变为0</p><p>-使空字符串转换为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;&#x27; - 1)//-1 </span><br><span class="line">console.log(&#x27;haha&#x27; - 1)//NaN </span><br><span class="line">console.log(null + 1)//1</span><br><span class="line">console.log(undefined + 1)//NaN </span><br><span class="line">console.log(NaN + 1)//NaN </span><br><span class="line">console.log(null == undefined)//true</span><br><span class="line">console.log(null === undefined)//false</span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>使函数书写更简洁，不需绑定this</p><p>适用于需要匿名函数的地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function () &#123;</span><br><span class="line">console.log(&#x27;普通函数&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = () =&gt; &#123;</span><br><span class="line">console.log(&#x27;箭头函数&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>函数只有一个参数时，可以省略小括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function (x) &#123;</span><br><span class="line">return x + x</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1));//2</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = x =&gt; &#123;</span><br><span class="line">return x + x</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1));//2</span><br></pre></td></tr></table></figure><p>函数体只有一行代码时，可以写在同一行，无需return可直接返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn = function (x, y) &#123;</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(1, 2));//3</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn = (x, y) =&gt; x + y;</span><br><span class="line">console.log(fn(1, 2));//3</span><br></pre></td></tr></table></figure><p>返回对象时，用小括号包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//普通函数</span><br><span class="line">let fn1 = function (uname) &#123;</span><br><span class="line">return &#123;uname : uname&#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(fn1(&#x27;哈哈&#x27;));//&#123;uname: &#x27;哈哈&#x27;&#125;</span><br><span class="line"></span><br><span class="line">//箭头函数</span><br><span class="line">let fn1 = uname =&gt; (&#123;uname : uname&#125;);</span><br><span class="line">console.log(fn1(&#x27;哈哈&#x27;));//&#123;uname: &#x27;哈哈&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数参数"><a href="#箭头函数参数" class="headerlink" title="箭头函数参数"></a>箭头函数参数</h3><p>箭头函数有剩余参数，没有 arguments 动态参数</p><h3 id="箭头函数this"><a href="#箭头函数this" class="headerlink" title="箭头函数this"></a>箭头函数this</h3><p>箭头函数不会创建自己的this，需根据函数调用，从自身作用域链的上一层沿用this值</p><p>事件回调函数使用箭头函数时，this为全局window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//普通函数指向调用者 </span><br><span class="line">console.log(this);</span><br><span class="line">const sayHi = function () &#123;</span><br><span class="line">console.log(this);   //指向window</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">console.log(this);//指向btn</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//箭头函数沿用上一层this值 </span><br><span class="line">console.log(this);</span><br><span class="line">    const sayHi = () =&gt; &#123;</span><br><span class="line">      console.log(this);    //window</span><br><span class="line">    &#125;</span><br><span class="line">    btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      console.log(this);//window</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">//DOM事件回调</span><br><span class="line">const btn = document.querySelector(&#x27;.btn&#x27;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">console.log(this);//箭头 指window</span><br><span class="line">&#125;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">console.log(this);//普通 指DOM对象</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p>封装乘法表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function num() &#123;</span><br><span class="line">for (let i = 1; i &lt;= 9; i++) &#123;</span><br><span class="line">// console.log(i);</span><br><span class="line">for (let j = 1; j &lt;= i; j++) &#123;</span><br><span class="line">// console.log(j);</span><br><span class="line">document.write(`&lt;span&gt; $&#123;j&#125; X $&#123;i&#125; = $&#123;j * i&#125; &lt;/span&gt;`);</span><br><span class="line">&#125;</span><br><span class="line">document.write(&#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">num();</span><br></pre></td></tr></table></figure><p>转换时间</p><p>小时： h = parseInt(总秒数 / 60 / 60 % 24)</p><p>分钟： m = parseInt(总秒数 / 60 % 60 ) </p><p>秒数: s = parseInt(总秒数 % 60) </p><p>写一个求和函数 不管用户传入几个实参，都要把和求出来</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/posts/f3fb008f.html"/>
      <url>/posts/f3fb008f.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Node.JS</p><p>VScode软件</p><p>GitHub账号</p><p>Hexo</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Licorice`Blog","short_name":"Licorice","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource>svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts>.recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside>div>button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url("/img/x1.cur"), auto;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),button:not(:disabled) {  cursor: url("/img/x2.cur"), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
  
</search>
